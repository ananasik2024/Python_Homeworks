# Задание 1
# Видеокарты
# В базе магазина электроники есть список видеокарт компании NVIDIA 
# разных поколений. Вместо полных названий хранятся только числа, 
# которые обозначают модель и поколение видеокарты. Недавно компания 
# выпустила новую линейку видеокарт. Самые старшие поколения разобрали 
# за пару дней. Напишите программу, которая удаляет наибольшие элементы 
# из списка видеокарт.

# num_of_models = int(input('Введите количество видеокарт: '))
# nvidias_models = []

# for _ in range(num_of_models):
#      model = int(input('Введите модель видеокарты: '))
#      nvidias_models.append(model)

# print('Список всех видеокарт: ', nvidias_models)

# maxItem = max(nvidias_models)  # Находим максимальное значение
# updates_models = [model for model in nvidias_models if model != maxItem]  # Генератор списка
# print('Список видеокарт после обновления:', updates_models)

# Задание 2: Илья зашёл на любительский киносайт, на котором пользователи оставляют
# рецензии на фильмы. Их список: 
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, 
# ‘Богемская рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
# часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если кинокартина
# есть в перечне, то добавляется в список любимых. Если её нет, то выводится
# ошибка. В конце выведите весь список любимых фильмов.
# Пример:
# Сколько фильмов хотите добавить? 3
# Введите название фильма: Леон
# Введите название фильма: Безумный Макс
# Ошибка: фильма Безумный Макс у нас нет :(
# Введите название фильма: Мементо
# Ваш список любимых фильмов: Леон, Мементо

# films = ['Леон' , 'Титаник', 'Отступники', 'Обитель зла', 'Зеленая миля', 'Достучаться до небес']
# my_list = []
 
# num_of_films = int(input('Сколько фильмов хотите добавить? '))
 
# for _ in range (num_of_films):
# 	while True:  # Бесконечный цикл, пока не введут правильный фильм
#           movie = input('Введите название фильма: ')
        
#           if movie in films:
#                my_list.append(movie)  # Добавляем фильм в список
#                break  # Выходим из while, если фильм найден
#           else:
#                print(f'Ошибка: фильма {movie} у нас нет :( Введите другой фильм.')
		
# print('Список ваших любимых фильмов:', ', '.join(my_list))

### Задача 3. Сортировка
# Дан список из N чисел. Напишите программу, которая сортирует элементы
# списка по возрастанию и выводит их на экран. Дополнительный список
# использовать нельзя.
# Также нельзя использовать готовые функции sorted/min/max и метод sort
# Постарайтесь придумать и написать как можно более эффективный алгоритм
# сортировки.
# Пример:
# Изначальный список: [1, 4, –3, 0, 10]
# Отсортированный список: [–3, 0, 1, 4, 10]

# list_3 = [1, 4, -3, 0, 10]
# print('Изначальный список: ', list_3)

# for i in range (len(list_3) - 1):
# 	for j in range (len(list_3) - 1 - i):
# 		if list_3[j] > list_3[j + 1]:
# 		     list_3[j], list_3[j + 1] = list_3[j + 1], list_3[j] #меняем местами текущий элемент со следующим
			
# print('Отсортированный список: ', list_3)

# Задача 4: В базе данных магазина вся необходимая информация по товарам 
# делится на два словаря: первый отвечает за коды товаров, второй — 
# за списки количества разнообразных товаров на складе. 
# Каждая запись второго словаря отображает, сколько и по какой цене
# закупалось товаров. Цена указана за одну штуку.
# Напишите программу, которая рассчитывает общую стоимость позиций для
# каждого товара на складе и выводит эту информацию на экран.
# Результат работы программы:
# Лампа — 27 штук, стоимость 1134 рубля.
# Стол — 54 штуки, стоимость 27 860 рублей.
# Диван — 3 штуки, стоимость 3550 рублей.
# Стул — 105 штук, стоимость 10 311 рублей.

# goods = {
# 'Лампа': '12345',
# 'Стол': '23456',
# 'Диван': '34567',
# 'Стул': '45678',
# }
# store = {
# '12345': [
# {'quantity': 27, 'price': 42},
# ],
# '23456': [
# {'quantity': 22, 'price': 510},
# {'quantity': 32, 'price': 520},
# ],
# '34567': [
# {'quantity': 2, 'price': 1200},
# {'quantity': 1, 'price': 1150},
# ],
# '45678': [
# {'quantity': 50, 'price': 100},
# {'quantity': 12, 'price': 95},
# {'quantity': 43, 'price': 97},
# ],
# }

# # Проходим по всем товарам в словаре goods
# for item_name in goods.keys():
# 	item_code = goods[item_name] # Получаем код товара из словаря goods

# 	total_quantity = 0
# 	total_cost = 0

# # Проходим по всем записям для данного товара в словаре store
# 	for entry in store[item_code]:
# 		total_quantity += entry['quantity'] # Увеличиваем общее количество товара
# 		total_cost += entry['price'] * entry['quantity'] # Увеличиваем общую стоимость товара

# 	print('{} — {} штук, стоимость {} рубля(ей).'.format(item_name,
# total_quantity, total_cost))

# Задание 5: Пицца
# В базе данных интернет-магазина PizzaTime хранятся сведения о том, кто, 
# что и сколько заказывал у них в определённый период. Вам нужно 
# структурировать эту информацию и определить, сколько всего пицц купил 
# каждый заказчик. На вход в программу подаётся N заказов. Каждый заказ 
# представляет собой строку вида «Покупатель — название пиццы — количество 
# заказанных пицц». Реализуйте код, который выводит список покупателей и 
# их заказов по алфавиту. Учитывайте, что один человек может заказать одну 
# и ту же пиццу несколько раз.
# Пример:
# Введите количество заказов: 6
# Первый заказ: Иванов Пепперони 1
# Второй заказ: Петров Де-Люкс 2
# Третий заказ: Иванов Мясная 3
# Четвёртый заказ: Иванов Мексиканская 2
# Пятый заказ: Иванов Пепперони 2
# Шестой заказ: Петров Интересная 5
# Иванов:
# Мексиканская: 2
# Мясная: 3
# Пепперони: 3
# Петров:
# Де-Люкс: 2
# Интересная: 5

orders_count = int(input('Введите количество заказов: '))

database = dict() # Создаем пустой словарь для хранения данных о заказах

for i_order in range(orders_count): # Обрабатываем каждый заказ
	customer, pizza_name, count = input('{} заказ: '.format(i_order
+ 1)).split() # Вводим заказ и разбиваем его на части

	count = int(count) # Преобразуем количество в целое число

	if customer not in database: # Если покупатель еще не добавлен в словарь
		database[customer] = {pizza_name: count} # Добавляем покупателя и начальную запись о пицце
	else:
		if pizza_name in database[customer]: # Если покупатель уже есть
			database[customer][pizza_name] += count 	# Если пицца уже была заказана ранее, увеличиваем количество
		else:
			database[customer][pizza_name] = count # Если пицца новая для этого покупателя, добавляем запись

for customer in sorted(database.keys()): # Сортируем список покупателей в алфавитном порядке и выводим информацию
	print('{}:'.format(customer))

	for pizza_name in sorted(database[customer].keys()): # Сортируем пиццы по алфавиту и выводим информацию
		print(' {}: {}'.format(pizza_name, database[customer][pizza_name]))