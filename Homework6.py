# Задание 1. Гласные буквы
# Команде лингвистов понравилось качество ваших программ, поэтому они
# решили заказать функцию для анализатора текста, которая создавала бы
# список гласных букв в нём и считала бы их количество.
# Напишите программу, которая запрашивает у пользователя текст и генерирует
# список гласных букв этого материала (сама строка вводится на русском языке).
# Выведите в консоль сам список и его длину.
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9

# text = input('Введите текст: ')

# vowels = [i for i in text if i in 'ауоыиэяюёе']

# print('Список гласных букв:', vowels)
# print('Длина списка:', len(vowels))

## Задание 2
# Случайные соревнования
# Мы хотим протестировать работу электронной таблицы для участников
# некоторых соревнований. Есть два списка, то есть две команды, по 20
# участников в каждом. В них хранятся очки каждого участника — вещественные
# числа с двумя знаками после точки, например 4.03.
# Член одной команды соревнуется с участником другой команды под таким же
# номером. То есть первый соревнуется с первым, второй — со вторым и так
# далее.
# Напишите программу, которая генерирует два списка участников (по 20
# элементов) из случайных вещественных чисел (от 5 до 10). Для этого найдите
# подходящую функцию из модуля random. Затем сгенерируйте третий список, в
# котором окажутся только победители из каждой пары.
# Пример:
# Первая команда: [7.86, 6.76, 9.97, 9.08, 5.45, 6.9, 8.65, 5.17, 8.17, 5.06, 7.56, 7.1,
# 7.18, 8.25, 5.53, 7.95, 8.91, 7.11, 8.29, 9.52]
# Вторая команда: [7.13, 5.7, 8.89, 5.36, 5.62, 9.46, 5.82, 8.67, 8.41, 7.0, 5.31, 7.8,
# 9.93, 7.76, 7.4, 8.26, 7.94, 5.71, 7.89, 7.77]
# Победители тура: [7.86, 6.76, 9.97, 9.08, 5.62, 9.46, 8.65, 8.67, 8.41, 7.0, 7.56, 7.8,
# 9.93, 8.25, 7.4, 8.26, 8.91, 7.11, 8.29, 9.52]

# import random

# first_team = [round(random.uniform(5, 10), 2) for _ in range(20)] 
# second_team = [round(random.uniform(5, 10), 2) for _ in range(20)] 

# winners = [
# 	first_team[i_player] if first_team[i_player] > second_team[i_player]
# 	else second_team[i_player]
# 	for i_player in range(20)
# ]

# # Вывод данных
# print('Первая команда:', first_team)
# print('Вторая команда:', second_team)
# print('Победители тура:', winners)

#Задача 3. Двумерный список
# Часто в программировании приходится писать код исходя из результата,
# который требует заказчик. В этот раз ему нужно получить двумерный список:
# [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
# Напишите программу, которая генерирует такой список и выводит его на экран.
# Используйте только list comprehensions.

# Создание двумерного списка с помощью list comprehension
# Внешний цикл по range(1, 5) определяет первый элемент каждой вложенной строки
# Внутренний цикл формирует элементы каждой строки с шагом 4

# my_list = [[j_num for j_num in range(i_list, 13, 4)] for i_list in
# range(1, 5)]
# print(my_list)

## Задача 4. Список списков

# Дан многомерный список:
# nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]
# Напишите код, который раскрывает все вложенные списки, то есть оставляет
# лишь внешний список. Для решения используйте только list comprehensions.
# Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]

# nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]],[[10, 11, 12], [13, 14, 15], [16, 17, 18]]]

# output = [digit 
#           for each_list in nice_list
#           for each_list_2 in each_list
#           for digit in each_list_2]

# # Вывод результата
# print(output)